// source: scalar.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.rpc.AssetProof', null, global);
goog.exportSymbol('proto.rpc.AssetProofRetrievalRequest', null, global);
goog.exportSymbol('proto.rpc.AssetProofRetrievalResponse', null, global);
goog.exportSymbol('proto.rpc.CertificateRegistrationRequest', null, global);
goog.exportSymbol('proto.rpc.ContractExecutionRequest', null, global);
goog.exportSymbol('proto.rpc.ContractExecutionResponse', null, global);
goog.exportSymbol('proto.rpc.ContractRegistrationRequest', null, global);
goog.exportSymbol('proto.rpc.ContractsListingRequest', null, global);
goog.exportSymbol('proto.rpc.ContractsListingResponse', null, global);
goog.exportSymbol('proto.rpc.FunctionRegistrationRequest', null, global);
goog.exportSymbol('proto.rpc.IdentifiableResponse', null, global);
goog.exportSymbol('proto.rpc.IdentifiableResponse.ResponseCase', null, global);
goog.exportSymbol('proto.rpc.LedgerValidationRequest', null, global);
goog.exportSymbol('proto.rpc.LedgerValidationResponse', null, global);
goog.exportSymbol('proto.rpc.LedgersValidationRequest', null, global);
goog.exportSymbol('proto.rpc.LedgersValidationResponse', null, global);
goog.exportSymbol('proto.rpc.ProofRetrievalRequest', null, global);
goog.exportSymbol('proto.rpc.ProofRetrievalResponse', null, global);
goog.exportSymbol('proto.rpc.ProofsRegistrationRequest', null, global);
goog.exportSymbol('proto.rpc.ReturnableRequest', null, global);
goog.exportSymbol('proto.rpc.ReturnableRequest.RequestCase', null, global);
goog.exportSymbol('proto.rpc.StateRetrievalRequest', null, global);
goog.exportSymbol('proto.rpc.StateRetrievalResponse', null, global);
goog.exportSymbol('proto.rpc.StateRetrievalResponse.TransactionState', null, global);
goog.exportSymbol('proto.rpc.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.CertificateRegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.CertificateRegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.CertificateRegistrationRequest.displayName = 'proto.rpc.CertificateRegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.FunctionRegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.FunctionRegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.FunctionRegistrationRequest.displayName = 'proto.rpc.FunctionRegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ContractRegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.ContractRegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ContractRegistrationRequest.displayName = 'proto.rpc.ContractRegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ContractsListingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.ContractsListingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ContractsListingRequest.displayName = 'proto.rpc.ContractsListingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ContractExecutionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.ContractExecutionRequest.repeatedFields_, null);
};
goog.inherits(proto.rpc.ContractExecutionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ContractExecutionRequest.displayName = 'proto.rpc.ContractExecutionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.LedgerValidationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.LedgerValidationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.LedgerValidationRequest.displayName = 'proto.rpc.LedgerValidationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.AssetProofRetrievalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.AssetProofRetrievalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.AssetProofRetrievalRequest.displayName = 'proto.rpc.AssetProofRetrievalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.StateRetrievalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.StateRetrievalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.StateRetrievalRequest.displayName = 'proto.rpc.StateRetrievalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ContractsListingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.ContractsListingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ContractsListingResponse.displayName = 'proto.rpc.ContractsListingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ContractExecutionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.ContractExecutionResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.ContractExecutionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ContractExecutionResponse.displayName = 'proto.rpc.ContractExecutionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.LedgerValidationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.LedgerValidationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.LedgerValidationResponse.displayName = 'proto.rpc.LedgerValidationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.AssetProofRetrievalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.AssetProofRetrievalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.AssetProofRetrievalResponse.displayName = 'proto.rpc.AssetProofRetrievalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.AssetProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.AssetProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.AssetProof.displayName = 'proto.rpc.AssetProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.StateRetrievalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.StateRetrievalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.StateRetrievalResponse.displayName = 'proto.rpc.StateRetrievalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.Status.displayName = 'proto.rpc.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ProofsRegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.ProofsRegistrationRequest.repeatedFields_, null);
};
goog.inherits(proto.rpc.ProofsRegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ProofsRegistrationRequest.displayName = 'proto.rpc.ProofsRegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ProofRetrievalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.ProofRetrievalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ProofRetrievalRequest.displayName = 'proto.rpc.ProofRetrievalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ProofRetrievalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.ProofRetrievalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ProofRetrievalResponse.displayName = 'proto.rpc.ProofRetrievalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ReturnableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.ReturnableRequest.oneofGroups_);
};
goog.inherits(proto.rpc.ReturnableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ReturnableRequest.displayName = 'proto.rpc.ReturnableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.LedgersValidationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.LedgersValidationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.LedgersValidationRequest.displayName = 'proto.rpc.LedgersValidationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.IdentifiableResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.IdentifiableResponse.oneofGroups_);
};
goog.inherits(proto.rpc.IdentifiableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.IdentifiableResponse.displayName = 'proto.rpc.IdentifiableResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.LedgersValidationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.LedgersValidationResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.LedgersValidationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.LedgersValidationResponse.displayName = 'proto.rpc.LedgersValidationResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.CertificateRegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.CertificateRegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.CertificateRegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CertificateRegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    certHolderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    certVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    certPem: jspb.Message.getFieldWithDefault(msg, 3, ""),
    viaProxy: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.CertificateRegistrationRequest}
 */
proto.rpc.CertificateRegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.CertificateRegistrationRequest;
  return proto.rpc.CertificateRegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.CertificateRegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.CertificateRegistrationRequest}
 */
proto.rpc.CertificateRegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertHolderId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCertVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertPem(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setViaProxy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.CertificateRegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.CertificateRegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.CertificateRegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CertificateRegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertHolderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCertVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCertPem();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getViaProxy();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string cert_holder_id = 1;
 * @return {string}
 */
proto.rpc.CertificateRegistrationRequest.prototype.getCertHolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.CertificateRegistrationRequest} returns this
 */
proto.rpc.CertificateRegistrationRequest.prototype.setCertHolderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 cert_version = 2;
 * @return {number}
 */
proto.rpc.CertificateRegistrationRequest.prototype.getCertVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.CertificateRegistrationRequest} returns this
 */
proto.rpc.CertificateRegistrationRequest.prototype.setCertVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string cert_pem = 3;
 * @return {string}
 */
proto.rpc.CertificateRegistrationRequest.prototype.getCertPem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.CertificateRegistrationRequest} returns this
 */
proto.rpc.CertificateRegistrationRequest.prototype.setCertPem = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool via_proxy = 4;
 * @return {boolean}
 */
proto.rpc.CertificateRegistrationRequest.prototype.getViaProxy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.CertificateRegistrationRequest} returns this
 */
proto.rpc.CertificateRegistrationRequest.prototype.setViaProxy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.FunctionRegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.FunctionRegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.FunctionRegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.FunctionRegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    functionBinaryName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    functionByteCode: msg.getFunctionByteCode_asB64(),
    viaProxy: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.FunctionRegistrationRequest}
 */
proto.rpc.FunctionRegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.FunctionRegistrationRequest;
  return proto.rpc.FunctionRegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.FunctionRegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.FunctionRegistrationRequest}
 */
proto.rpc.FunctionRegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionBinaryName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFunctionByteCode(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setViaProxy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.FunctionRegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.FunctionRegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.FunctionRegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.FunctionRegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFunctionBinaryName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFunctionByteCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getViaProxy();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string function_id = 1;
 * @return {string}
 */
proto.rpc.FunctionRegistrationRequest.prototype.getFunctionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.FunctionRegistrationRequest} returns this
 */
proto.rpc.FunctionRegistrationRequest.prototype.setFunctionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string function_binary_name = 2;
 * @return {string}
 */
proto.rpc.FunctionRegistrationRequest.prototype.getFunctionBinaryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.FunctionRegistrationRequest} returns this
 */
proto.rpc.FunctionRegistrationRequest.prototype.setFunctionBinaryName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes function_byte_code = 3;
 * @return {string}
 */
proto.rpc.FunctionRegistrationRequest.prototype.getFunctionByteCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes function_byte_code = 3;
 * This is a type-conversion wrapper around `getFunctionByteCode()`
 * @return {string}
 */
proto.rpc.FunctionRegistrationRequest.prototype.getFunctionByteCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFunctionByteCode()));
};


/**
 * optional bytes function_byte_code = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFunctionByteCode()`
 * @return {!Uint8Array}
 */
proto.rpc.FunctionRegistrationRequest.prototype.getFunctionByteCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFunctionByteCode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.FunctionRegistrationRequest} returns this
 */
proto.rpc.FunctionRegistrationRequest.prototype.setFunctionByteCode = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool via_proxy = 4;
 * @return {boolean}
 */
proto.rpc.FunctionRegistrationRequest.prototype.getViaProxy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.FunctionRegistrationRequest} returns this
 */
proto.rpc.FunctionRegistrationRequest.prototype.setViaProxy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ContractRegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ContractRegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ContractRegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractRegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractBinaryName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractByteCode: msg.getContractByteCode_asB64(),
    contractProperties: jspb.Message.getFieldWithDefault(msg, 4, ""),
    certHolderId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    certVersion: jspb.Message.getFieldWithDefault(msg, 6, 0),
    signature: msg.getSignature_asB64(),
    viaProxy: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ContractRegistrationRequest}
 */
proto.rpc.ContractRegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ContractRegistrationRequest;
  return proto.rpc.ContractRegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ContractRegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ContractRegistrationRequest}
 */
proto.rpc.ContractRegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractBinaryName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractByteCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractProperties(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertHolderId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCertVersion(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setViaProxy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ContractRegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ContractRegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ContractRegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractRegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractBinaryName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractByteCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getContractProperties();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCertHolderId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCertVersion();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getViaProxy();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.rpc.ContractRegistrationRequest.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractRegistrationRequest} returns this
 */
proto.rpc.ContractRegistrationRequest.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract_binary_name = 2;
 * @return {string}
 */
proto.rpc.ContractRegistrationRequest.prototype.getContractBinaryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractRegistrationRequest} returns this
 */
proto.rpc.ContractRegistrationRequest.prototype.setContractBinaryName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes contract_byte_code = 3;
 * @return {string}
 */
proto.rpc.ContractRegistrationRequest.prototype.getContractByteCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes contract_byte_code = 3;
 * This is a type-conversion wrapper around `getContractByteCode()`
 * @return {string}
 */
proto.rpc.ContractRegistrationRequest.prototype.getContractByteCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractByteCode()));
};


/**
 * optional bytes contract_byte_code = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractByteCode()`
 * @return {!Uint8Array}
 */
proto.rpc.ContractRegistrationRequest.prototype.getContractByteCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractByteCode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.ContractRegistrationRequest} returns this
 */
proto.rpc.ContractRegistrationRequest.prototype.setContractByteCode = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string contract_properties = 4;
 * @return {string}
 */
proto.rpc.ContractRegistrationRequest.prototype.getContractProperties = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractRegistrationRequest} returns this
 */
proto.rpc.ContractRegistrationRequest.prototype.setContractProperties = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string cert_holder_id = 5;
 * @return {string}
 */
proto.rpc.ContractRegistrationRequest.prototype.getCertHolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractRegistrationRequest} returns this
 */
proto.rpc.ContractRegistrationRequest.prototype.setCertHolderId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 cert_version = 6;
 * @return {number}
 */
proto.rpc.ContractRegistrationRequest.prototype.getCertVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.ContractRegistrationRequest} returns this
 */
proto.rpc.ContractRegistrationRequest.prototype.setCertVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes signature = 7;
 * @return {string}
 */
proto.rpc.ContractRegistrationRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes signature = 7;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.ContractRegistrationRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.ContractRegistrationRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.ContractRegistrationRequest} returns this
 */
proto.rpc.ContractRegistrationRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bool via_proxy = 8;
 * @return {boolean}
 */
proto.rpc.ContractRegistrationRequest.prototype.getViaProxy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.ContractRegistrationRequest} returns this
 */
proto.rpc.ContractRegistrationRequest.prototype.setViaProxy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ContractsListingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ContractsListingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ContractsListingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractsListingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    certHolderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    certVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ContractsListingRequest}
 */
proto.rpc.ContractsListingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ContractsListingRequest;
  return proto.rpc.ContractsListingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ContractsListingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ContractsListingRequest}
 */
proto.rpc.ContractsListingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertHolderId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCertVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ContractsListingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ContractsListingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ContractsListingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractsListingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertHolderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCertVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string cert_holder_id = 1;
 * @return {string}
 */
proto.rpc.ContractsListingRequest.prototype.getCertHolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractsListingRequest} returns this
 */
proto.rpc.ContractsListingRequest.prototype.setCertHolderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 cert_version = 2;
 * @return {number}
 */
proto.rpc.ContractsListingRequest.prototype.getCertVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.ContractsListingRequest} returns this
 */
proto.rpc.ContractsListingRequest.prototype.setCertVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string contract_id = 3;
 * @return {string}
 */
proto.rpc.ContractsListingRequest.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractsListingRequest} returns this
 */
proto.rpc.ContractsListingRequest.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes signature = 4;
 * @return {string}
 */
proto.rpc.ContractsListingRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.ContractsListingRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.ContractsListingRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.ContractsListingRequest} returns this
 */
proto.rpc.ContractsListingRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.ContractExecutionRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ContractExecutionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ContractExecutionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ContractExecutionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractExecutionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractArgument: jspb.Message.getFieldWithDefault(msg, 2, ""),
    certHolderId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    certVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    functionArgument: jspb.Message.getFieldWithDefault(msg, 5, ""),
    signature: msg.getSignature_asB64(),
    preExecution: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    orderingKeysList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ContractExecutionRequest}
 */
proto.rpc.ContractExecutionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ContractExecutionRequest;
  return proto.rpc.ContractExecutionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ContractExecutionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ContractExecutionRequest}
 */
proto.rpc.ContractExecutionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractArgument(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertHolderId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCertVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionArgument(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreExecution(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrderingKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ContractExecutionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ContractExecutionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ContractExecutionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractExecutionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractArgument();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCertHolderId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCertVersion();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFunctionArgument();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getPreExecution();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getOrderingKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.rpc.ContractExecutionRequest.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract_argument = 2;
 * @return {string}
 */
proto.rpc.ContractExecutionRequest.prototype.getContractArgument = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.setContractArgument = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cert_holder_id = 3;
 * @return {string}
 */
proto.rpc.ContractExecutionRequest.prototype.getCertHolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.setCertHolderId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 cert_version = 4;
 * @return {number}
 */
proto.rpc.ContractExecutionRequest.prototype.getCertVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.setCertVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string function_argument = 5;
 * @return {string}
 */
proto.rpc.ContractExecutionRequest.prototype.getFunctionArgument = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.setFunctionArgument = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes signature = 6;
 * @return {string}
 */
proto.rpc.ContractExecutionRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes signature = 6;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.ContractExecutionRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.ContractExecutionRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bool pre_execution = 7;
 * @return {boolean}
 */
proto.rpc.ContractExecutionRequest.prototype.getPreExecution = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.setPreExecution = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated string ordering_keys = 8;
 * @return {!Array<string>}
 */
proto.rpc.ContractExecutionRequest.prototype.getOrderingKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.setOrderingKeysList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.addOrderingKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.ContractExecutionRequest} returns this
 */
proto.rpc.ContractExecutionRequest.prototype.clearOrderingKeysList = function() {
  return this.setOrderingKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.LedgerValidationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.LedgerValidationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.LedgerValidationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.LedgerValidationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startAge: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endAge: jspb.Message.getFieldWithDefault(msg, 3, 0),
    certHolderId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    certVersion: jspb.Message.getFieldWithDefault(msg, 5, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.LedgerValidationRequest}
 */
proto.rpc.LedgerValidationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.LedgerValidationRequest;
  return proto.rpc.LedgerValidationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.LedgerValidationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.LedgerValidationRequest}
 */
proto.rpc.LedgerValidationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartAge(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndAge(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertHolderId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCertVersion(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.LedgerValidationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.LedgerValidationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.LedgerValidationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.LedgerValidationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartAge();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndAge();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCertHolderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCertVersion();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string asset_id = 1;
 * @return {string}
 */
proto.rpc.LedgerValidationRequest.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.LedgerValidationRequest} returns this
 */
proto.rpc.LedgerValidationRequest.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 start_age = 2;
 * @return {number}
 */
proto.rpc.LedgerValidationRequest.prototype.getStartAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.LedgerValidationRequest} returns this
 */
proto.rpc.LedgerValidationRequest.prototype.setStartAge = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 end_age = 3;
 * @return {number}
 */
proto.rpc.LedgerValidationRequest.prototype.getEndAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.LedgerValidationRequest} returns this
 */
proto.rpc.LedgerValidationRequest.prototype.setEndAge = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string cert_holder_id = 4;
 * @return {string}
 */
proto.rpc.LedgerValidationRequest.prototype.getCertHolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.LedgerValidationRequest} returns this
 */
proto.rpc.LedgerValidationRequest.prototype.setCertHolderId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 cert_version = 5;
 * @return {number}
 */
proto.rpc.LedgerValidationRequest.prototype.getCertVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.LedgerValidationRequest} returns this
 */
proto.rpc.LedgerValidationRequest.prototype.setCertVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes signature = 6;
 * @return {string}
 */
proto.rpc.LedgerValidationRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes signature = 6;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.LedgerValidationRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.LedgerValidationRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.LedgerValidationRequest} returns this
 */
proto.rpc.LedgerValidationRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.AssetProofRetrievalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.AssetProofRetrievalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AssetProofRetrievalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    age: jspb.Message.getFieldWithDefault(msg, 2, 0),
    certHolderId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    certVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.AssetProofRetrievalRequest}
 */
proto.rpc.AssetProofRetrievalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.AssetProofRetrievalRequest;
  return proto.rpc.AssetProofRetrievalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.AssetProofRetrievalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.AssetProofRetrievalRequest}
 */
proto.rpc.AssetProofRetrievalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertHolderId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCertVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.AssetProofRetrievalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.AssetProofRetrievalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AssetProofRetrievalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCertHolderId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCertVersion();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string asset_id = 1;
 * @return {string}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.AssetProofRetrievalRequest} returns this
 */
proto.rpc.AssetProofRetrievalRequest.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 age = 2;
 * @return {number}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.AssetProofRetrievalRequest} returns this
 */
proto.rpc.AssetProofRetrievalRequest.prototype.setAge = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string cert_holder_id = 3;
 * @return {string}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.getCertHolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.AssetProofRetrievalRequest} returns this
 */
proto.rpc.AssetProofRetrievalRequest.prototype.setCertHolderId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 cert_version = 4;
 * @return {number}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.getCertVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.AssetProofRetrievalRequest} returns this
 */
proto.rpc.AssetProofRetrievalRequest.prototype.setCertVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes signature = 5;
 * @return {string}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.AssetProofRetrievalRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.AssetProofRetrievalRequest} returns this
 */
proto.rpc.AssetProofRetrievalRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.StateRetrievalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.StateRetrievalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.StateRetrievalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.StateRetrievalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.StateRetrievalRequest}
 */
proto.rpc.StateRetrievalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.StateRetrievalRequest;
  return proto.rpc.StateRetrievalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.StateRetrievalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.StateRetrievalRequest}
 */
proto.rpc.StateRetrievalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.StateRetrievalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.StateRetrievalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.StateRetrievalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.StateRetrievalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transaction_id = 1;
 * @return {string}
 */
proto.rpc.StateRetrievalRequest.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.StateRetrievalRequest} returns this
 */
proto.rpc.StateRetrievalRequest.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ContractsListingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ContractsListingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ContractsListingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractsListingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    json: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ContractsListingResponse}
 */
proto.rpc.ContractsListingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ContractsListingResponse;
  return proto.rpc.ContractsListingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ContractsListingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ContractsListingResponse}
 */
proto.rpc.ContractsListingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ContractsListingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ContractsListingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ContractsListingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractsListingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string json = 1;
 * @return {string}
 */
proto.rpc.ContractsListingResponse.prototype.getJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractsListingResponse} returns this
 */
proto.rpc.ContractsListingResponse.prototype.setJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.ContractExecutionResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ContractExecutionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ContractExecutionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ContractExecutionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractExecutionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proofsList: jspb.Message.toObjectList(msg.getProofsList(),
    proto.rpc.AssetProof.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ContractExecutionResponse}
 */
proto.rpc.ContractExecutionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ContractExecutionResponse;
  return proto.rpc.ContractExecutionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ContractExecutionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ContractExecutionResponse}
 */
proto.rpc.ContractExecutionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.rpc.AssetProof;
      reader.readMessage(value,proto.rpc.AssetProof.deserializeBinaryFromReader);
      msg.addProofs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ContractExecutionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ContractExecutionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ContractExecutionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ContractExecutionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProofsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rpc.AssetProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.rpc.ContractExecutionResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ContractExecutionResponse} returns this
 */
proto.rpc.ContractExecutionResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated AssetProof proofs = 2;
 * @return {!Array<!proto.rpc.AssetProof>}
 */
proto.rpc.ContractExecutionResponse.prototype.getProofsList = function() {
  return /** @type{!Array<!proto.rpc.AssetProof>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.AssetProof, 2));
};


/**
 * @param {!Array<!proto.rpc.AssetProof>} value
 * @return {!proto.rpc.ContractExecutionResponse} returns this
*/
proto.rpc.ContractExecutionResponse.prototype.setProofsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rpc.AssetProof=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.AssetProof}
 */
proto.rpc.ContractExecutionResponse.prototype.addProofs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rpc.AssetProof, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.ContractExecutionResponse} returns this
 */
proto.rpc.ContractExecutionResponse.prototype.clearProofsList = function() {
  return this.setProofsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.LedgerValidationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.LedgerValidationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.LedgerValidationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.LedgerValidationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    proof: (f = msg.getProof()) && proto.rpc.AssetProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.LedgerValidationResponse}
 */
proto.rpc.LedgerValidationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.LedgerValidationResponse;
  return proto.rpc.LedgerValidationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.LedgerValidationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.LedgerValidationResponse}
 */
proto.rpc.LedgerValidationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatusCode(value);
      break;
    case 2:
      var value = new proto.rpc.AssetProof;
      reader.readMessage(value,proto.rpc.AssetProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.LedgerValidationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.LedgerValidationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.LedgerValidationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.LedgerValidationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.AssetProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 status_code = 1;
 * @return {number}
 */
proto.rpc.LedgerValidationResponse.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.LedgerValidationResponse} returns this
 */
proto.rpc.LedgerValidationResponse.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional AssetProof proof = 2;
 * @return {?proto.rpc.AssetProof}
 */
proto.rpc.LedgerValidationResponse.prototype.getProof = function() {
  return /** @type{?proto.rpc.AssetProof} */ (
    jspb.Message.getWrapperField(this, proto.rpc.AssetProof, 2));
};


/**
 * @param {?proto.rpc.AssetProof|undefined} value
 * @return {!proto.rpc.LedgerValidationResponse} returns this
*/
proto.rpc.LedgerValidationResponse.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.LedgerValidationResponse} returns this
 */
proto.rpc.LedgerValidationResponse.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.LedgerValidationResponse.prototype.hasProof = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.AssetProofRetrievalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.AssetProofRetrievalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.AssetProofRetrievalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AssetProofRetrievalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: (f = msg.getProof()) && proto.rpc.AssetProof.toObject(includeInstance, f),
    ledgerName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.AssetProofRetrievalResponse}
 */
proto.rpc.AssetProofRetrievalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.AssetProofRetrievalResponse;
  return proto.rpc.AssetProofRetrievalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.AssetProofRetrievalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.AssetProofRetrievalResponse}
 */
proto.rpc.AssetProofRetrievalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.AssetProof;
      reader.readMessage(value,proto.rpc.AssetProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLedgerName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.AssetProofRetrievalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.AssetProofRetrievalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.AssetProofRetrievalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AssetProofRetrievalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.AssetProof.serializeBinaryToWriter
    );
  }
  f = message.getLedgerName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional AssetProof proof = 1;
 * @return {?proto.rpc.AssetProof}
 */
proto.rpc.AssetProofRetrievalResponse.prototype.getProof = function() {
  return /** @type{?proto.rpc.AssetProof} */ (
    jspb.Message.getWrapperField(this, proto.rpc.AssetProof, 1));
};


/**
 * @param {?proto.rpc.AssetProof|undefined} value
 * @return {!proto.rpc.AssetProofRetrievalResponse} returns this
*/
proto.rpc.AssetProofRetrievalResponse.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.AssetProofRetrievalResponse} returns this
 */
proto.rpc.AssetProofRetrievalResponse.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.AssetProofRetrievalResponse.prototype.hasProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ledger_name = 2;
 * @return {string}
 */
proto.rpc.AssetProofRetrievalResponse.prototype.getLedgerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.AssetProofRetrievalResponse} returns this
 */
proto.rpc.AssetProofRetrievalResponse.prototype.setLedgerName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.AssetProof.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.AssetProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.AssetProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AssetProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    age: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 3, ""),
    hash: msg.getHash_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.AssetProof}
 */
proto.rpc.AssetProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.AssetProof;
  return proto.rpc.AssetProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.AssetProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.AssetProof}
 */
proto.rpc.AssetProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAge(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.AssetProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.AssetProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.AssetProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AssetProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string asset_id = 1;
 * @return {string}
 */
proto.rpc.AssetProof.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.AssetProof} returns this
 */
proto.rpc.AssetProof.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 age = 2;
 * @return {number}
 */
proto.rpc.AssetProof.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.AssetProof} returns this
 */
proto.rpc.AssetProof.prototype.setAge = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string nonce = 3;
 * @return {string}
 */
proto.rpc.AssetProof.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.AssetProof} returns this
 */
proto.rpc.AssetProof.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes hash = 4;
 * @return {string}
 */
proto.rpc.AssetProof.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes hash = 4;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.rpc.AssetProof.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.rpc.AssetProof.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.AssetProof} returns this
 */
proto.rpc.AssetProof.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes signature = 5;
 * @return {string}
 */
proto.rpc.AssetProof.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.AssetProof.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.AssetProof.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.AssetProof} returns this
 */
proto.rpc.AssetProof.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.StateRetrievalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.StateRetrievalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.StateRetrievalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.StateRetrievalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.StateRetrievalResponse}
 */
proto.rpc.StateRetrievalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.StateRetrievalResponse;
  return proto.rpc.StateRetrievalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.StateRetrievalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.StateRetrievalResponse}
 */
proto.rpc.StateRetrievalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rpc.StateRetrievalResponse.TransactionState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.StateRetrievalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.StateRetrievalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.StateRetrievalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.StateRetrievalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rpc.StateRetrievalResponse.TransactionState = {
  UNSET: 0,
  COMMITTED: 1,
  ABORTED: 2,
  UNKNOWN: 3
};

/**
 * optional TransactionState state = 1;
 * @return {!proto.rpc.StateRetrievalResponse.TransactionState}
 */
proto.rpc.StateRetrievalResponse.prototype.getState = function() {
  return /** @type {!proto.rpc.StateRetrievalResponse.TransactionState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rpc.StateRetrievalResponse.TransactionState} value
 * @return {!proto.rpc.StateRetrievalResponse} returns this
 */
proto.rpc.StateRetrievalResponse.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Status}
 */
proto.rpc.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.Status;
  return proto.rpc.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Status}
 */
proto.rpc.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.rpc.Status.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.Status} returns this
 */
proto.rpc.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rpc.Status.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.Status} returns this
 */
proto.rpc.Status.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.ProofsRegistrationRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ProofsRegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ProofsRegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ProofsRegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ProofsRegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    proofsList: jspb.Message.toObjectList(msg.getProofsList(),
    proto.rpc.AssetProof.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ProofsRegistrationRequest}
 */
proto.rpc.ProofsRegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ProofsRegistrationRequest;
  return proto.rpc.ProofsRegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ProofsRegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ProofsRegistrationRequest}
 */
proto.rpc.ProofsRegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.AssetProof;
      reader.readMessage(value,proto.rpc.AssetProof.deserializeBinaryFromReader);
      msg.addProofs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ProofsRegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ProofsRegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ProofsRegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ProofsRegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProofsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpc.AssetProof.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssetProof proofs = 1;
 * @return {!Array<!proto.rpc.AssetProof>}
 */
proto.rpc.ProofsRegistrationRequest.prototype.getProofsList = function() {
  return /** @type{!Array<!proto.rpc.AssetProof>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.AssetProof, 1));
};


/**
 * @param {!Array<!proto.rpc.AssetProof>} value
 * @return {!proto.rpc.ProofsRegistrationRequest} returns this
*/
proto.rpc.ProofsRegistrationRequest.prototype.setProofsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rpc.AssetProof=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.AssetProof}
 */
proto.rpc.ProofsRegistrationRequest.prototype.addProofs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpc.AssetProof, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.ProofsRegistrationRequest} returns this
 */
proto.rpc.ProofsRegistrationRequest.prototype.clearProofsList = function() {
  return this.setProofsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ProofRetrievalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ProofRetrievalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ProofRetrievalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ProofRetrievalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ProofRetrievalRequest}
 */
proto.rpc.ProofRetrievalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ProofRetrievalRequest;
  return proto.rpc.ProofRetrievalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ProofRetrievalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ProofRetrievalRequest}
 */
proto.rpc.ProofRetrievalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ProofRetrievalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ProofRetrievalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ProofRetrievalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ProofRetrievalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string asset_id = 1;
 * @return {string}
 */
proto.rpc.ProofRetrievalRequest.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ProofRetrievalRequest} returns this
 */
proto.rpc.ProofRetrievalRequest.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ProofRetrievalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ProofRetrievalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ProofRetrievalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ProofRetrievalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: (f = msg.getProof()) && proto.rpc.AssetProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ProofRetrievalResponse}
 */
proto.rpc.ProofRetrievalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ProofRetrievalResponse;
  return proto.rpc.ProofRetrievalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ProofRetrievalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ProofRetrievalResponse}
 */
proto.rpc.ProofRetrievalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.AssetProof;
      reader.readMessage(value,proto.rpc.AssetProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ProofRetrievalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ProofRetrievalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ProofRetrievalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ProofRetrievalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.AssetProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssetProof proof = 1;
 * @return {?proto.rpc.AssetProof}
 */
proto.rpc.ProofRetrievalResponse.prototype.getProof = function() {
  return /** @type{?proto.rpc.AssetProof} */ (
    jspb.Message.getWrapperField(this, proto.rpc.AssetProof, 1));
};


/**
 * @param {?proto.rpc.AssetProof|undefined} value
 * @return {!proto.rpc.ProofRetrievalResponse} returns this
*/
proto.rpc.ProofRetrievalResponse.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.ProofRetrievalResponse} returns this
 */
proto.rpc.ProofRetrievalResponse.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.ProofRetrievalResponse.prototype.hasProof = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.ReturnableRequest.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.rpc.ReturnableRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  CERTIFICATE_REGISTRATION_REQUEST: 2,
  CONTRACT_REGISTRATION_REQUEST: 3,
  FUNCTION_REGISTRATION_REQUEST: 4,
  CONTRACT_EXECUTION_REQUEST: 5
};

/**
 * @return {proto.rpc.ReturnableRequest.RequestCase}
 */
proto.rpc.ReturnableRequest.prototype.getRequestCase = function() {
  return /** @type {proto.rpc.ReturnableRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.rpc.ReturnableRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ReturnableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ReturnableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ReturnableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ReturnableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    certificateRegistrationRequest: (f = msg.getCertificateRegistrationRequest()) && proto.rpc.CertificateRegistrationRequest.toObject(includeInstance, f),
    contractRegistrationRequest: (f = msg.getContractRegistrationRequest()) && proto.rpc.ContractRegistrationRequest.toObject(includeInstance, f),
    functionRegistrationRequest: (f = msg.getFunctionRegistrationRequest()) && proto.rpc.FunctionRegistrationRequest.toObject(includeInstance, f),
    contractExecutionRequest: (f = msg.getContractExecutionRequest()) && proto.rpc.ContractExecutionRequest.toObject(includeInstance, f),
    hostname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    port: jspb.Message.getFieldWithDefault(msg, 7, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ReturnableRequest}
 */
proto.rpc.ReturnableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ReturnableRequest;
  return proto.rpc.ReturnableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ReturnableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ReturnableRequest}
 */
proto.rpc.ReturnableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.rpc.CertificateRegistrationRequest;
      reader.readMessage(value,proto.rpc.CertificateRegistrationRequest.deserializeBinaryFromReader);
      msg.setCertificateRegistrationRequest(value);
      break;
    case 3:
      var value = new proto.rpc.ContractRegistrationRequest;
      reader.readMessage(value,proto.rpc.ContractRegistrationRequest.deserializeBinaryFromReader);
      msg.setContractRegistrationRequest(value);
      break;
    case 4:
      var value = new proto.rpc.FunctionRegistrationRequest;
      reader.readMessage(value,proto.rpc.FunctionRegistrationRequest.deserializeBinaryFromReader);
      msg.setFunctionRegistrationRequest(value);
      break;
    case 5:
      var value = new proto.rpc.ContractExecutionRequest;
      reader.readMessage(value,proto.rpc.ContractExecutionRequest.deserializeBinaryFromReader);
      msg.setContractExecutionRequest(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ReturnableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ReturnableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ReturnableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ReturnableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCertificateRegistrationRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.CertificateRegistrationRequest.serializeBinaryToWriter
    );
  }
  f = message.getContractRegistrationRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpc.ContractRegistrationRequest.serializeBinaryToWriter
    );
  }
  f = message.getFunctionRegistrationRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rpc.FunctionRegistrationRequest.serializeBinaryToWriter
    );
  }
  f = message.getContractExecutionRequest();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rpc.ContractExecutionRequest.serializeBinaryToWriter
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.rpc.ReturnableRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ReturnableRequest} returns this
 */
proto.rpc.ReturnableRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CertificateRegistrationRequest certificate_registration_request = 2;
 * @return {?proto.rpc.CertificateRegistrationRequest}
 */
proto.rpc.ReturnableRequest.prototype.getCertificateRegistrationRequest = function() {
  return /** @type{?proto.rpc.CertificateRegistrationRequest} */ (
    jspb.Message.getWrapperField(this, proto.rpc.CertificateRegistrationRequest, 2));
};


/**
 * @param {?proto.rpc.CertificateRegistrationRequest|undefined} value
 * @return {!proto.rpc.ReturnableRequest} returns this
*/
proto.rpc.ReturnableRequest.prototype.setCertificateRegistrationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rpc.ReturnableRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.ReturnableRequest} returns this
 */
proto.rpc.ReturnableRequest.prototype.clearCertificateRegistrationRequest = function() {
  return this.setCertificateRegistrationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.ReturnableRequest.prototype.hasCertificateRegistrationRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ContractRegistrationRequest contract_registration_request = 3;
 * @return {?proto.rpc.ContractRegistrationRequest}
 */
proto.rpc.ReturnableRequest.prototype.getContractRegistrationRequest = function() {
  return /** @type{?proto.rpc.ContractRegistrationRequest} */ (
    jspb.Message.getWrapperField(this, proto.rpc.ContractRegistrationRequest, 3));
};


/**
 * @param {?proto.rpc.ContractRegistrationRequest|undefined} value
 * @return {!proto.rpc.ReturnableRequest} returns this
*/
proto.rpc.ReturnableRequest.prototype.setContractRegistrationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rpc.ReturnableRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.ReturnableRequest} returns this
 */
proto.rpc.ReturnableRequest.prototype.clearContractRegistrationRequest = function() {
  return this.setContractRegistrationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.ReturnableRequest.prototype.hasContractRegistrationRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FunctionRegistrationRequest function_registration_request = 4;
 * @return {?proto.rpc.FunctionRegistrationRequest}
 */
proto.rpc.ReturnableRequest.prototype.getFunctionRegistrationRequest = function() {
  return /** @type{?proto.rpc.FunctionRegistrationRequest} */ (
    jspb.Message.getWrapperField(this, proto.rpc.FunctionRegistrationRequest, 4));
};


/**
 * @param {?proto.rpc.FunctionRegistrationRequest|undefined} value
 * @return {!proto.rpc.ReturnableRequest} returns this
*/
proto.rpc.ReturnableRequest.prototype.setFunctionRegistrationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rpc.ReturnableRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.ReturnableRequest} returns this
 */
proto.rpc.ReturnableRequest.prototype.clearFunctionRegistrationRequest = function() {
  return this.setFunctionRegistrationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.ReturnableRequest.prototype.hasFunctionRegistrationRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ContractExecutionRequest contract_execution_request = 5;
 * @return {?proto.rpc.ContractExecutionRequest}
 */
proto.rpc.ReturnableRequest.prototype.getContractExecutionRequest = function() {
  return /** @type{?proto.rpc.ContractExecutionRequest} */ (
    jspb.Message.getWrapperField(this, proto.rpc.ContractExecutionRequest, 5));
};


/**
 * @param {?proto.rpc.ContractExecutionRequest|undefined} value
 * @return {!proto.rpc.ReturnableRequest} returns this
*/
proto.rpc.ReturnableRequest.prototype.setContractExecutionRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rpc.ReturnableRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.ReturnableRequest} returns this
 */
proto.rpc.ReturnableRequest.prototype.clearContractExecutionRequest = function() {
  return this.setContractExecutionRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.ReturnableRequest.prototype.hasContractExecutionRequest = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string hostname = 6;
 * @return {string}
 */
proto.rpc.ReturnableRequest.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.ReturnableRequest} returns this
 */
proto.rpc.ReturnableRequest.prototype.setHostname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 port = 7;
 * @return {number}
 */
proto.rpc.ReturnableRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.ReturnableRequest} returns this
 */
proto.rpc.ReturnableRequest.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes signature = 8;
 * @return {string}
 */
proto.rpc.ReturnableRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes signature = 8;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.ReturnableRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.ReturnableRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.ReturnableRequest} returns this
 */
proto.rpc.ReturnableRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.LedgersValidationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.LedgersValidationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.LedgersValidationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.LedgersValidationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    certHolderId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    certVersion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.LedgersValidationRequest}
 */
proto.rpc.LedgersValidationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.LedgersValidationRequest;
  return proto.rpc.LedgersValidationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.LedgersValidationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.LedgersValidationRequest}
 */
proto.rpc.LedgersValidationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertHolderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCertVersion(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.LedgersValidationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.LedgersValidationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.LedgersValidationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.LedgersValidationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCertHolderId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCertVersion();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string asset_id = 1;
 * @return {string}
 */
proto.rpc.LedgersValidationRequest.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.LedgersValidationRequest} returns this
 */
proto.rpc.LedgersValidationRequest.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cert_holder_id = 2;
 * @return {string}
 */
proto.rpc.LedgersValidationRequest.prototype.getCertHolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.LedgersValidationRequest} returns this
 */
proto.rpc.LedgersValidationRequest.prototype.setCertHolderId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 cert_version = 3;
 * @return {number}
 */
proto.rpc.LedgersValidationRequest.prototype.getCertVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.LedgersValidationRequest} returns this
 */
proto.rpc.LedgersValidationRequest.prototype.setCertVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes signature = 4;
 * @return {string}
 */
proto.rpc.LedgersValidationRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.LedgersValidationRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.LedgersValidationRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.LedgersValidationRequest} returns this
 */
proto.rpc.LedgersValidationRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.IdentifiableResponse.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.rpc.IdentifiableResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  CONTRACT_EXECUTION_RESPONSE: 2
};

/**
 * @return {proto.rpc.IdentifiableResponse.ResponseCase}
 */
proto.rpc.IdentifiableResponse.prototype.getResponseCase = function() {
  return /** @type {proto.rpc.IdentifiableResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.rpc.IdentifiableResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.IdentifiableResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.IdentifiableResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.IdentifiableResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.IdentifiableResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractExecutionResponse: (f = msg.getContractExecutionResponse()) && proto.rpc.ContractExecutionResponse.toObject(includeInstance, f),
    statusCode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.IdentifiableResponse}
 */
proto.rpc.IdentifiableResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.IdentifiableResponse;
  return proto.rpc.IdentifiableResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.IdentifiableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.IdentifiableResponse}
 */
proto.rpc.IdentifiableResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.rpc.ContractExecutionResponse;
      reader.readMessage(value,proto.rpc.ContractExecutionResponse.deserializeBinaryFromReader);
      msg.setContractExecutionResponse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.IdentifiableResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.IdentifiableResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.IdentifiableResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.IdentifiableResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractExecutionResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.ContractExecutionResponse.serializeBinaryToWriter
    );
  }
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.rpc.IdentifiableResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.IdentifiableResponse} returns this
 */
proto.rpc.IdentifiableResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ContractExecutionResponse contract_execution_response = 2;
 * @return {?proto.rpc.ContractExecutionResponse}
 */
proto.rpc.IdentifiableResponse.prototype.getContractExecutionResponse = function() {
  return /** @type{?proto.rpc.ContractExecutionResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.ContractExecutionResponse, 2));
};


/**
 * @param {?proto.rpc.ContractExecutionResponse|undefined} value
 * @return {!proto.rpc.IdentifiableResponse} returns this
*/
proto.rpc.IdentifiableResponse.prototype.setContractExecutionResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rpc.IdentifiableResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.IdentifiableResponse} returns this
 */
proto.rpc.IdentifiableResponse.prototype.clearContractExecutionResponse = function() {
  return this.setContractExecutionResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.IdentifiableResponse.prototype.hasContractExecutionResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 status_code = 3;
 * @return {number}
 */
proto.rpc.IdentifiableResponse.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.IdentifiableResponse} returns this
 */
proto.rpc.IdentifiableResponse.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.LedgersValidationResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.LedgersValidationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.LedgersValidationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.LedgersValidationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.LedgersValidationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseList: jspb.Message.toObjectList(msg.getResponseList(),
    proto.rpc.AssetProofRetrievalResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.LedgersValidationResponse}
 */
proto.rpc.LedgersValidationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.LedgersValidationResponse;
  return proto.rpc.LedgersValidationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.LedgersValidationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.LedgersValidationResponse}
 */
proto.rpc.LedgersValidationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.AssetProofRetrievalResponse;
      reader.readMessage(value,proto.rpc.AssetProofRetrievalResponse.deserializeBinaryFromReader);
      msg.addResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.LedgersValidationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.LedgersValidationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.LedgersValidationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.LedgersValidationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpc.AssetProofRetrievalResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssetProofRetrievalResponse response = 1;
 * @return {!Array<!proto.rpc.AssetProofRetrievalResponse>}
 */
proto.rpc.LedgersValidationResponse.prototype.getResponseList = function() {
  return /** @type{!Array<!proto.rpc.AssetProofRetrievalResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.AssetProofRetrievalResponse, 1));
};


/**
 * @param {!Array<!proto.rpc.AssetProofRetrievalResponse>} value
 * @return {!proto.rpc.LedgersValidationResponse} returns this
*/
proto.rpc.LedgersValidationResponse.prototype.setResponseList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rpc.AssetProofRetrievalResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.AssetProofRetrievalResponse}
 */
proto.rpc.LedgersValidationResponse.prototype.addResponse = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpc.AssetProofRetrievalResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.LedgersValidationResponse} returns this
 */
proto.rpc.LedgersValidationResponse.prototype.clearResponseList = function() {
  return this.setResponseList([]);
};


goog.object.extend(exports, proto.rpc);
