# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    machine: true
    image: ubuntu-2004:202101-01

    working_directory: ~/scalardl-web-client-sdk

    steps:
      - checkout
      # Restore dependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}

      - run:
          name: Docker login
          command: |
            echo ${GHCR_PAT} | docker login https://ghcr.io -u ${GHCR_USERNAME} --password-stdin

      - run: # Update chrome to stable version for karma
          name: Install Chromedriver latest version
          command: |
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install -y lsb-release libappindicator3-1 dpkg libgbm1
            curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome.deb
            sudo sed -i 's|HERE/chrome"|HERE/chrome" --no-sandbox|g' /opt/google/chrome/google-chrome
            rm google-chrome.deb

      - run:
          name: Update docker and docker compose
          command: |
            sudo apt-get purge docker-ce containerd.io
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

      - run:
          name: checkout scalar-samples repository as it contains the script to spin up scalardl environment and easier for us to maintain the CI
          command: |
            git init
            git pull https://${GHCR_USERNAME}:${GHCR_PAT}@github.com/scalar-labs/scalar-samples.git
          working_directory: .circleci/

      - run:
          name: Spin container via docker compose
          command: docker-compose -f docker-compose.yml -f docker-compose-open-cassandra-port.yml up -d
          working_directory: .circleci/

      - run:
          name: Install node@14.16 # Update node for karma to work
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v14.16
            nvm alias default v14.16
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV

      - run:
          name: Install npm
          command: npm install

      - run:
          name: Wait for Cassandra to spin up to be able to update the Cassandra schema in the next step
          command: |
            echo -n "Wait for C* "
              until docker exec scalar-samples-cassandra-1 cqlsh 2> /dev/null ; do
                  sleep 0.5
                  echo -n "#"
              done

      - run:
          name: Insert function table and wait
          command: |
            docker cp function_schema.cql \
            scalar-samples-cassandra-1:function_schema.cql
            docker exec scalar-samples-cassandra-1 cqlsh -f function_schema.cql
            sleep 10
          working_directory: .circleci/

      - save_cache:
          key: v1-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

      # run tests
      - run:
          command: npm test

      - store_test_results:
          path: ~/scalardl-web-client-sdk/test/test-reports

      - store_artifacts:
          path: ~/scalardl-web-client-sdk/test/test-reports
  deploy:
    docker:
      #Node LTS 14.16 "fermium"
      - image: circleci/node:14.16
    steps:
      - checkout
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
      - run:
          name: Publish package
          command: npm publish --access public

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          context: "scalar"
      - deploy:
          context: "scalar"
          requires:
            - build
          filters:
            branches:
              only: master
