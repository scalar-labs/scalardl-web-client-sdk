/* eslint-disable no-invalid-this */
const {
  ClientServiceBase,
  StatusCode,
  ClientProperties,
} = require('@scalar-labs/scalardl-javascript-sdk-base');

const protobuf = require('./scalar_pb');
const {LedgerClient, LedgerPrivilegedClient} = require('./scalar_grpc_web_pb');

const {SignerFactory} = require('./signer');
const {
  ClientServiceWithIndexedDb,
  IndexedDbKeyNotFoundError,
  IndexedDbOperationError,
} = require('./indexdb');

/**
 * This class inherits ClientServiceBase.
 * It needs to be constructed with LedgerClient
 * and protobuf messages that generated by gRPC tools
 * @class
 */
class ClientService extends ClientServiceBase {
  /**
   * Inject LedgerClient and protobuf messages
   * @constructor
   * @param {Object} properties JSON Object used for setting client properties
   */
  constructor(properties) {
    const clientProperties = new ClientProperties(properties);

    const host = clientProperties.getServerHost();
    const tlsEnabled = clientProperties.getTlsEnabled();
    const ledgerClientServiceURL =
      `${tlsEnabled ? 'https' : 'http'}://${host}:${clientProperties.getServerPort()}`;
    const ledgerPriviledgedClientServiceURL =
      `${tlsEnabled ? 'https' : 'http'}://${host}:${clientProperties.getServerPrivilegedPort()}`;

    const services = {
      ledgerClient: new LedgerClient(ledgerClientServiceURL),
      ledgerPrivileged: new LedgerPrivilegedClient(ledgerPriviledgedClientServiceURL),
      signerFactory: new SignerFactory(),
    };

    super(services, protobuf, properties);
  }
}

module.exports = {
  ClientService,
  ClientServiceWithIndexedDb,
  IndexedDbKeyNotFoundError,
  IndexedDbOperationError,
  StatusCode,
};
